// [SP] This allows a spectator to spawn outside of the team selection room
script 940( int which ) NET CLIENTSIDE
{
	if( PlayerInGame( PlayerNumber() ))
	{
		DisplayCross();
		SETFONT( "BigFont" );
	HudMessage( s: "You are not a spectator!";
		HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
		terminate;
	}
	
	switch( Which )
	{
	case 0:
		Teleport( random( 1, 2 ));
		break;
	case 1:
		FadeTo( 0, 0, 0, 0.0, 0.0 );
		break;
	}
}

// [Dusk] allows players to switch to the losing team
script 942( void ) NET
{
	// You sorta need a team first
	if( !PlayerInGame( PlayerNumber() ))
	{
		DisplayCross();
		SETFONT( "BigFont" );
		HudMessage( s: "Can't use this as a spectator!";
			HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
		terminate;
	}
	
	// Not during warm-up
	if( Timer() <= 5 * 60 * 35 )
	{
		DisplayCross();
		SETFONT( "BigFont" );
		HudMessage( s: "Too early to use this!";
			HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
		terminate;
	}
	
	int score;
	
	if( PlayerTeam() == TEAM_BLUE )
	{
		if( RedCount() + 1 >= BlueCount() )
		{
			DisplayCross();
			SETFONT( "BigFont" );
			HudMessage( s: "There is already enough players on Nod!";
				HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
			terminate;
		}
		
		if( RedScore() > BlueScore() )
		{
			DisplayCross();
			SETFONT( "BigFont" );
			HudMessage( s: "Nod has more buildings than GDI!";
				HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
			terminate;
		}
		
		score = BlueCount() - RedCount() - 1 + ( ( BaseLeft[1] - BaseLeft[0] ) * 2 );
		
		TakeInventory( "IsBlue", 1 );
		GiveInventory( "IsRed", 1 );
	}
	else if( PlayerTeam() == TEAM_RED )
	{
		if( BlueCount() + 1 >= RedCount() )
		{
			DisplayCross();
			SETFONT( "BigFont" );
			HudMessage( s: "There is already enough players on GDI!";
				HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
			terminate;
		}
		
		if( BlueScore() > RedScore() )
		{
			DisplayCross();
			SETFONT( "BigFont" );
			HudMessage( s: "GDI has more buildings than Nod!";
				HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0 );
			terminate;
		}
		
		score = RedCount() - BlueCount() - 1 + ( ( BaseLeft[0] - BaseLeft[1] ) * 2 );
		
		TakeInventory( "IsRed", 1 );
		GiveInventory( "IsBlue", 1 );
	}
	
	// logs and notices
	str newteam, newcolor;
	
	if( PlayerTeam() == TEAM_BLUE )
	{
		newteam = "GDI";
		newcolor = "\cF";
	}
	else {
		newteam = "Nod";
		newcolor = "\cG";
	}
	
	IntelMessageBold( strparam( n: 0, s: " switches to ", s: newcolor, s: newteam ));
	Log( s: pname( -1 ), s: " switches to ", s: newteam, s: " team. (Score: ", d: score, s: ")" );
	
	Player_SetTeam( !PlayerTeam() );
	
	Teleport( 70 + PlayerTeam() );
	GiveInventory( "IsInSpawnRoom", 1 );
	
	// Resign, if necessary
	// TODO: is this really needed?
	if( CheckInventory( "HasClass" ))
		ACS_ExecuteAlways( 95, 0 );
		
	// reward
	delay( 35 * 2 );
	AddExperience( score * 50 );
	delay( 35 );
	LocalAmbientSound( "powerup/credsound", 255 );
	AwardCredits( score * 200 );
}

// This allows players to sell weapons. Kinda like partial resign.
script 950( void ) NET
{
	if( !PlayerInGame( PlayerNumber() ))
		terminate;
	
	if( CheckInventory( "IsMech" ))
		terminate;
	
	int price = 0;
	str weapon = "";
	
	// Make the price be 25% of the cost of the first found class which
	// uses this weapon as the primary weapon. Make it at least be $25.
	for( int i = 0; i < NUM_CLASSES; ++i )
	{
		if( !CheckWeapon( GetClassItemName( i, 0 )))
			continue;
		
		weapon = GetClassItemName( i, 0 );
		price = Classes[i][CK_COST] / 4;
	
		if( price < 25 )
			price = 25;
		
		break;
	}
	
	// Also let these weapons be sold too
	if( i >= NUM_CLASSES )
	{
		if( CheckWeapon( "Handgun" ))
		{
			price = 25;
			weapon = "Handgun";
		}
		else if( CheckWeapon( "EagerBeaver" ))
		{
			price = 125;
			weapon = "EagerBeaver";
		}
		else if( CheckWeapon( "PlasmaCannon" ))
		{
			price = 375;
			weapon = "PlasmaCannon";
		}
		else if( CheckWeapon( "LaserRifle" ))
		{
			price = 75;
			weapon = "LaserRifle";
		}
		else
		{
			Error( "You can't sell that!" );
			terminate;
		}
	}
	
	TakeInventory( weapon, 1 );
	GiveCredits( -1, price );
	LocalAmbientSound( "powerup/credsound", 127 );
	IntelMessage( strparam( s:"You have sold your ", s:weapon, s:" for \cq$\cd", d: price ));
	Log( s:pname( -1 ), s:" sells ", s:weapon, s:" for $", d:price );
}

// This allows players to see their speed factor.
function int GetSpeedFactor( void )
{
	int f = GetSpeed();
	
	if( CheckInventory( "PowerSpeedUpgrade" )) f = FixedMul( f, 1.25 );
	if( CheckInventory( "PowerFatigue" )) f = FixedMul( f, 0.55 );
	if( CheckInventory( "PowerTimeGunBoost" )) f = FixedMul( f, 1.4 );
	if( CheckInventory( "PowerTimeGunSlow" )) f = FixedMul( f, 0.6 );
	
	return f;
}

script 921( void ) NET CLIENTSIDE
{
	Log( s: "My speed is ", f: GetSpeedFactor() );
}