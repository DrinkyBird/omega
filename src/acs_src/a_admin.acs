// [SP] NOTICE: This is an administrator 'puke' script. USE WITH CARE! This can be abused very easily.
script 401( int Player, int Action, int arg )
{	SetActivator( TID_Player + Player );

	switch( Action )
	{	case 3:
			if( ThingCount( T_NONE, TID_Player + Player ) == 0 )
			{	Log( s: "Error: no such player" );
				terminate;
			}

			if( PlayerIsBot( Player ))
			{	Log( s: "Error: ", s: pname( Player ), s: " is a bot." );
				terminate;
			}

			SetPlayerProperty( 0, 1, 1 );
			SetPlayerProperty( 0, 1, 2 );
			SetPlayerProperty( 0, 1, 3 );
			BigMessageBold( strparam( n:Player + 1, s:"\c- becomes an \cGadministrator" ));
			Log( s:"*** \caWARNING!\c- Game Master mode activated for ", s:pname( Player ),
				s:" - this has been logged in the server console." );
			Log( s:"*** To deactivate this mode, you (or target) must either spectate or call a_exit in console." );
			Log( s:"*** Please don't abuse this! Do what you need to do, then exit this mode immediately." );
			GiveInventory( "AdministratorSwitch", 1 );
			IsAdmin[Player] = true;
			GiveInventory( "IsAdmin", 1 );
			break;

		case 1:

			// [Dusk] Merged the two team-based scripts to one
			if( !PlayerInGame( player ))
			{	Log( s:"Player ", d:Player, s:" not found!" );
				terminate;
			}

			if( PlayerTeam() == arg )
			{	Log( s:pname( Player ), s:" is already on ", s:TeamNames[arg] );
				terminate;
			}

			BigMessageBold( strparam( n:Player + 1, s:"\c- has been forced to change to ", s:TeamNames[arg], s:" by an admin." ));
			Log( s:pname( Player ), s:" forced to change to ", s:TeamNames[arg], s:" by admin." );
			ChangePlayerTeam( Player, arg );
			StartTime[Player] = -0x7FFFFFFF;
			break;

		case 0:
			switch( Player )
			{	case 3:
					Log( s: "Usage: gamemaster <IDX> (use 'playerinfo' to get IDX numbers)" );
					break;

				case 1:
					Log( s: "Usage: forceblue / forcered <IDX> (use ",
						s: "'playerinfo' to get IDX numbers)" );
					break;

				default:
					Log( s: "Please don't puke this script directly! Use the provided ccmd's ",
						s: "- it's for your sanity's own good!" );
					break;
			}
			break;

		default:
Log( s: "Unknown action!" );
	}
}

script 402( int Arg1, int Arg2, int Arg3 ) NET
{	if( IsAdmin[PlayerNumber()] == false )
		terminate;

	int newrotation;
	str msg;

	switch( Arg1 )
	{	case 0:
			// help!
			break;

		case 1:
			// Warp
			// [Dusk] Use SetActorPosition
			SetActorPosition( 0, arg2 << 16, arg3 << 16, 0, false );
			break;

		case 2:

			// Teleport to spot
			if( arg2 <= 0 )
			{	// [Dusk] Help message.
				HudMessage( s:"Usage: a_teleport <tid>\n",
					s:"TIDs of interest:\n",
					s:"1: Blue base            2: Red base\n",
					s:"70: Blue spawn room     71: Red spawn room\n",
					s:"108: Blue wf hanger     208: Red wf hanger\n",
					s:"110: Blue mech room     210: Red mech room\n",
					s:"111: Blue res room      211: Red res room\n";
					HUDMSG_PLAIN | HUDMSG_LOG, 9000, 0, 0, 0, 0 );

				HudMessage( s: ""; HUDMSG_PLAIN, 9000, 0, 0, 0, 0.1 );
				terminate;
			}

			Teleport_NoFog( Arg2 );
			break;

		case 3:
			// Activate crate
			ACS_ExecuteAlways( 309, 0, Arg2, Arg3 );
			break;

		case 4:
		case 5:
			// [Dusk] ...?
			break;

		case 6:
			// Toggle berserk
			if( CheckInventory( "PowerBerserk" ))
			{	TakeInventory( "PowerBerserk", 1 );
				delay( 5 );
				TakeInventory( "PowerBerserkHue", 1 );
				delay( 3 );
				GiveInventory( "RedHueRemover", 1 );
			}
			else
			{	GiveInventory( "BerserkSwitch", 1 );
				delay( 5 );
				GiveInventory( "BerserkHue", 1 );
			}

			break;

		case 7:
			// Instant resign
			if( PlayerTeam() == TEAM_RED )
				Teleport( 71 );
			else
				Teleport( 70 );

			ACS_ExecuteAlways( 95, 0 );
			break;

		case 8:
			// Give beacon item
			GiveInventory( "BeaconItem", 1 );
			break;

		case 9:
			// Become Admin Player Again - or remove it
			if( CheckInventory( "PowerAdministrator" ))
			{	TakeInventory( "PowerAdministrator", 1 );
				SetPlayerProperty( 0, 0, 1 );
				SetPlayerProperty( 0, 0, 2 );
				SetPlayerProperty( 0, 0, 3 );
			}
			else
			{	GiveInventory( "AdministratorSwitch", 1 );
				SetPlayerProperty( 0, 1, 1 );
				SetPlayerProperty( 0, 1, 2 );
				SetPlayerProperty( 0, 1, 3 );
			}
			break;

		case 10:
			// Set Team
			ChangePlayerTeam( PlayerNumber(), arg2 );
			break;

		case 11:
			// Give utility gun
			GiveInventory( "RepairGun", 1 );
			GiveInventory( "UtilityGun", 1 );
			break;

		case 12:
			// Set speed
			SetActorProperty( 0, APROP_SPEED, 0.01 * Arg2 );
			break;

		case 13:
			// [Dusk] Admin pistol - rotate fire
			newrotation = ( CheckInventory( "AdminPistolRotation" ) + 1 ) % 3;
			SetInventory( "AdminPistolRotation", newrotation );

			switch( newrotation )
			{	case 0: msg = "Normal mode"; break;
				case 1: msg = "Repair / Disarm mode"; break;
				case 2: msg = "Deconstruction mode"; break;
			}

			HudMessage( s:msg; HUDMSG_FADEOUT, 1800 + PlayerNumber(), CR_WHITE, 0.5, 0.45, 1.0, 0.5 );
			break;

		case 14:
			// Open Deck
			GiveInventory( "CrateChooser", 1 );
			break;

		case 15:
			// Notarget
			SetActorProperty( 0, APROP_NoTarget, !GetActorProperty( 0, APROP_NoTarget ));
			break;

		case 16:
			// [Dusk] Exit admin mode
			SetPlayerProperty( 0, 0, 1 );
			SetPlayerProperty( 0, 0, 2 );
			SetPlayerProperty( 0, 0, 3 );
			SetActorProperty( 0, APROP_NoTarget, 0 );
			BigMessageBold( strparam( s: "Admin ", n: 0, s: "\c- becomes a regular player again." ));
			Log( s: pname( -1 ), s: " exits admin mode." );
			IsAdmin[PlayerNumber()] = false;
			ACS_ExecuteAlways( 96, 0, 1 - PlayerTeam() ); // teleport to spawn room
			delay( 5 );
			ACS_ExecuteAlways( 95, 0 ); // resign
			break;

		case 17:

			// Set health
			if( arg2 <= 0 )
				break;

			SetActorProperty( 0, APROP_Health, Arg2 );
			break;

		case 18:

			// Fly
			if( CheckInventory( "PowerFlight" ))
				TakeInventory( "PowerFlight", 1 );
			else
				GiveInventory( "AdminFlight", 1 );

			break;

		default:
Log( s: "Unknown action!" );
			break;
	}
}

// [Dusk] TEAM SHUFFLE
script 403( void )
{	AmbientSound( "nuke/boom", 127 );
	int max = PlayerCount() / 2;
	int numblue, numred, newteam;
	str name;
	int changed, i;
	Log( s: "[SHUFFLE] Begin of team shuffle." );

	// First, knock out start times of everybody - we don't want the team
	// switcher to interfere.
	for( i = 0; i < MAXPLAYERS; i++ )
		if( PlayerInGame( i ))
			StartTime[i] = -0x7FFFFFFF;

	for( i = 0; i < MAXPLAYERS; i++ )
	{	if( !PlayerInGame( i ))
			continue;

		// Determine the new team randomly, but make sure to keep the teams
		// even, that's the very point of this script. Also, do not interfere
		// game masters, they're here to do something important.
		if( IsAdmin[i] )
			newteam = GetPlayerInfo( i, PLAYERINFO_TEAM );
		else
		{	newteam = random( TEAM_BLUE, TEAM_RED );

			if( newteam == TEAM_BLUE && numblue >= max )
				newteam = TEAM_RED;
			else if( newteam == TEAM_RED && numred >= max )
				newteam = TEAM_BLUE;
		}

		// Increase the counters for the above block
		if( newteam == TEAM_RED )
			numred++;
		else
			numblue++;

		SetActivator( TID_Player + i );
		ChangePlayerTeam( i, newteam );
		delay( 5 );
	}

	SetActivator( -1 );
	HudMessageBold( s: "Teams have been shuffled";
		HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.3, 3.5, 1.0 );
	Log( s: "[SHUFFLE] Shuffle complete." );
}