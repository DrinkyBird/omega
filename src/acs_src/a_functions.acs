/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * All Out War 2 miscallenous script functions
 * Credit to VoltlocK for originally creating the engine
 * With modifications by Eruanna, Dusk and the Omega Team
 *
 * You may use portions of this script in your project as long as you give
 * credit where credit is due. Please don't be lame and just copy-paste any
 * of this and call it your own. Thanks!
 */

// MATH FUNCTIONS
function int abs( int n )
{	if( n < 0 )
		return -n;

	return n;
}

function int msqr( int n )
{	return n * n;
}

// [SP] This came from the ZDoom wiki
function int sqrt( int number )
{	if( number <= 3 )
	{	if( number > 0 )
		{	return 1;
		}

		return 0;
	}

	int oldAns = number >> 1,                     // initial guess
		newAns = ( oldAns + number / oldAns ) >> 1; // first iteration

	// main iterative method
	while( newAns < oldAns )
	{	oldAns = newAns;
		newAns = ( oldAns + number / oldAns ) >> 1;
	}

	return oldAns;
}

// [Dusk] check functions

// [Dusk] returns 1 if player has $price money, discount taken into account
// if not, prints the error message and returns 0
function int CheckCredits( int price )
{	if( IsAdmin[PlayerNumber()] ) return 1;

	price = ACS_ExecuteWithResult( 330, price );

	if( GetCredits( PlayerNumber() ) < price )
	{	TakeInventory( "PurchaseToken", 1 );
		LocalAmbientSound( "misc/funds", 255 );
Error( strparam( s: "You need \cQ$\cD", d: price - GetCredits( PlayerNumber() ),
				 s: "\c- more to purchase this!" ));

		if( GetLevelInfo( LEVELINFO_LEVELNUM ) == 20 || GetLevelInfo( LEVELINFO_LEVELNUM ) == 21 )
			ThrustThing( ( VectorAngle( GetActorVelX( 0 ), GetActorVelY( 0 )) >> 8 ) + 128, 25, 0, 0 );

		return 0;
	}

	return 1;
}

// [Dusk] returns 1 if player has no class, 0 of they have, along with error message
function int IsResigned( void )
{	if( CheckInventory( "HasClass" ) == 0 )
		return 1;

	Error( "You need to resign first!" );

	if( GetLevelInfo( LEVELINFO_LEVELNUM ) == 20 || GetLevelInfo( LEVELINFO_LEVELNUM ) == 21 )
		ThrustThing( ( VectorAngle( GetActorVelX( 0 ), GetActorVelY( 0 )) >> 8 ) + 128, 25, 0, 0 );

	return 0;
}

// [Dusk] returns 1 if player is pressing this button the second time
function int IsSecondPress( str StatCard, int price )
{	// AOW20 skips this check for classes
	if( ( GetLevelInfo( LEVELINFO_LEVELNUM ) == 20 || GetLevelInfo( LEVELINFO_LEVELNUM ) == 21 ) && (
				StatCard != "WEAP01" && StatCard != "WEAP02" &&
				StatCard != "WEAP03" && StatCard != "WEAP04" &&
				StatCard != "WEAP05" && StatCard != "WEAP06" ))
	{	return 1;
	}

	if( !CheckInventory( "PurchaseToken" ))
	{	ACS_ExecuteWithResult( 330, price );
		SetFont( StatCard );
HudMessage( s: "a";
					HUDMSG_FADEOUT, 2100 + PlayerNumber(), CR_Green, 0.25, 0.25, 3.0, 2.0 );
		ACS_ExecuteAlways( 956, 0 );
		return 0;
	}
	else
	{	// [Dusk] clear the card out once the class is purchased
HudMessage( s: ""; HUDMSG_PLAIN, 2100 + PlayerNumber(), CR_UNTRANSLATED, 0.0, 0.0, 0.01 );
	}

	return 1;
}

// this bit is in its own script because custom functions cannot use latent functions
script 956( void )
{	GiveInventory( "PurchaseToken", 1 );
	Delay( 35 * 1 );
	TakeInventory( "PurchaseToken", 1 );
	terminate;
}

// [Dusk] tick display function
function void DisplayTick( void )
{	LocalAmbientSound( "c4/use", 255 );
	// SETFONT("TICK");
	// HudMessage(s:"a"; HUDMSG_FADEOUT, 2100+PlayerNumber(), CR_DarkRed, 0.5, 0.5, 2.0, 1.0);
}

function void DisplayCross( void )
{	LocalAmbientSound( "misc/nope", 127 );
	// SETFONT("NOENTRY");
	// HudMessage(s:"a"; HUDMSG_FADEOUT, 2100+PlayerNumber(), CR_DarkRed, 0.5, 0.5, 2.0, 1.0);
}

// [Dusk] Barracks check
function int CheckBarracks( int Team )
{	if( IsAdmin[PlayerNumber()] )
		return 1;

	if( !GotBarracks[Team] )
	{	Error( "Your \cFbarracks\c- has been destroyed!" );
		return 0;
	}

	return 1;
}

// [Dusk] Research Centre check
function int CheckPlant( int Team )
{	if( IsAdmin[PlayerNumber()] )
		return 1;

	if( !GotPlant[Team] )
	{	Error( "Your \cFresearch centre\c- has been destroyed!" );
		return 0;
	}

	return 1;
}

// [Dusk] Refinery check
function int CheckRefinery( int Team )
{	if( IsAdmin[PlayerNumber()] )
		return 1;

	if( !GotRefinery[Team] )
	{	Error( "Your \cFrefinery\c- has been destroyed!" );
		return 0;
	}

	return 1;
}

// [Dusk] War Factory check
function int CheckFactory( int Team )
{	if( IsAdmin[PlayerNumber()] )
		return 1;

	if( !GotFactory[Team] )
	{	Error( "Your \cFwar factory\c- has been destroyed!" );
		return 0;
	}

	return 1;
}

// [Dusk] Check for free hangers
function int CheckFreeHanger( int Team )
{	if( GettingMech[Team] )
	{	Error( "There is another mech in the hanger!" );
		return 0;
	}

	return 1;
}

// [Dusk] Check for advanced mech research
function int CheckAdvMechResearch( int Team )
{	if( IsAdmin[PlayerNumber()] ) return 1;

	if( !AdvancedMechResearch[Team] )
	{	Error( "You need to research \cfadvanced mechs\c- first!" );
		return 0;
	}

	return 1;
}

// [Dusk] Check for plasma cooldown
function int CheckPlasmaCooldown( void )
{	int wait;

	if( IsAdmin[PlayerNumber()] )
		return 1;

	if( PlasmaCooldown[PlayerNumber()] > Timer() )
	{	wait = ( PlasmaCooldown[PlayerNumber()] - Timer() ) / 35;
		DisplayCross();
		SETFONT( "BigFont" );
		HudMessage( s: "You must wait \cF", d: wait, s: " seconds\c- before\n",
			s: "purchasing another \cNplasma cannon!";
			HUDMSG_FADEOUT, 240 + PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0 );
		return 0;
	}

	return 1;
}

// [Dusk]
function void GiveToAll( str what, int amount )
{	for( int i = 0; i < MAXPLAYERS; i++ )
		GiveActorInventory( TID_Player + i, what, amount );
}

function bool MitigateDoublePress( void )
{	if( Timer() - LastMenu[PlayerNumber()] < 5 )
		return true; // [SP] This is to fix the "double cost" bug

	LastMenu[PlayerNumber()] = Timer();
	return false;
}

function int SurrenderCount( int team )
{	int count = 0;

	for( int i = 0; i < MAXPLAYERS; i++ )
	{	if( PlayerInGame( i ) && GetPlayerInfo( i, PLAYERINFO_TEAM ) == team && Surrender[i] )
			count++;
	}

	return count;
}

// [Dusk] Freezes all players
function void FreezeBold( void )
{	for( int i = 0; i < MAXPLAYERS; i++ )
	{	if( PlayerInGame( i ) && !IsAdmin[i] )
		{	SetPlayerProperty( i, true, PROP_TOTALLYFROZEN );
			SetActorProperty( TID_Player + i, APROP_Invulnerable, true );
		}
	}
}

// [Dusk] Refreshes time cop limit
function void RecountTimeCops( void )
{	NumTimeCops[TEAM_BLUE] = 0;
	NumTimeCops[TEAM_RED] = 0;

	for( int i = 0; i < MAXPLAYERS; i++ )
	{	if( !PlayerInGame( i ))
			continue;

		if( CheckActorInventory( TID_Player + i, "TimeGun" ))
		{	if( GetPlayerInfo( i, PLAYERINFO_TEAM ) == TEAM_RED )
				NumTimeCops[TEAM_RED]++;
			else if( GetPlayerInfo( i, PLAYERINFO_TEAM ) == TEAM_BLUE )
				NumTimeCops[TEAM_BLUE]++;
		}
	}
}

// refreshes plasma limit
function void RecountPlasma( void )
{	NumPlasmaCannons[0] = 0;
	NumPlasmaCannons[1] = 0;

	for( int i = 0; i < MAXPLAYERS; i++ )
	{	if( !PlayerInGame( i )) continue;

		if( CheckActorInventory( TID_Player + i, "PlasmaCannon" ))
		{	if( GetPlayerInfo( i, PLAYERINFO_TEAM ) == TEAM_RED )
				NumPlasmaCannons[0]++;
			else if( GetPlayerInfo( i, PLAYERINFO_TEAM ) == TEAM_BLUE )
				NumPlasmaCannons[1]++;
		}
	}
}

// [Dusk] Returns color code for the given fraction
function str FractionColor( int numer, int denom )
{	if( numer > denom )
		return "\cH";

	if( numer == denom )
		return "\cQ";

	if( ( numer * 4 ) / 3 >= denom ) // 75%
		return "\cD";

	if( numer * 2 >= denom ) // 50%
		return "\cF";

	if( numer * 4 >= denom ) // 25%
		return "\cI";

	if( numer > 0 ) // 24 - 1%
		return "\cR";

	return "\cM"; // 0%
}

// shortcuts
function void SetFragGrenades( int grenades )
{	if( !CheckInventory( "FragGrenade" ))
		GiveInventory( "FragGrenade", 1 );

	SetAmmoCapacity( "FragGrenadeAmmo", grenades );
	SetInventory( "FragGrenadeAmmo", grenades );
}

// [Dusk] Various shortcut functions.
function int GetHealth( void )
{	return GetActorProperty( 0, APROP_HEALTH );
}

function void SetHealth( int hp )
{	SetActorProperty( 0, APROP_HEALTH, hp );
}

function int GetActorHealth( int tid )
{	return GetActorProperty( tid, APROP_HEALTH );
}

function void SetActorHealth( int tid, int hp )
{	SetActorProperty( tid, APROP_HEALTH, hp );
}

function int GetSpawnHealth( void )
{	return GetActorProperty( 0, APROP_SPAWNHEALTH );
}

function void SetSpawnHealth( int shp )
{	SetActorProperty( 0, APROP_SPAWNHEALTH, shp );
}

function int GetActorSpawnHealth( int tid )
{	return GetActorProperty( tid, APROP_SPAWNHEALTH );
}

function void SetActorSpawnHealth( int tid, int shp )
{	SetActorProperty( tid, APROP_SPAWNHEALTH, shp );
}

function int GetSpeed( void )
{	return GetActorProperty( 0, APROP_SPEED );
}

function void SetSpeed( int value )
{	SetActorProperty( 0, APROP_SPEED, value );
}

function int GetActorSpeed( int tid )
{	return GetActorProperty( tid, APROP_SPEED );
}

function void SetActorSpeed( int tid, int value )
{	SetActorProperty( tid, APROP_SPEED, value );
}

function int LevelNumber( void )
{	return GetLevelInfo( LEVELINFO_LEVELNUM );
}

function void GivePoints( int p )
{	Team_GivePoints( PlayerTeam(), p, false );
}

function int GetPlayerTeam( int p )
{	return GetPlayerInfo( p, PLAYERINFO_TEAM );
}

// returns the `display name` of the player with id pn
// NOTE: this function must cater for client-side acs!
function str DisplayName( int pn )
{	int tid = TID_Player + pn;

	if( pn < 0 || pn > 31 ) tid = ActivatorTID();

	if( CheckActorInventory( tid, "IsMech" ))
	{	if( CheckActorInventory( tid, "OrcaWeapons" ))      return "\cCOrca";

		if( CheckActorInventory( tid, "RavenWeapons" ))     return "\cCRaven";

		if( CheckActorInventory( tid, "WolverineWeapons" )) return "\cCWolverine";

		if( CheckActorInventory( tid, "MadCatWeapons" ))    return "\cCMadCat";

		if( CheckActorInventory( tid, "TitanWeapons" ))     return "\cCTitan";

		if( CheckActorInventory( tid, "JuggernautWeapons" ))  return "\cCJuggernaut";
	}
	else if( CheckActorInventory( tid, "PowerBerserk" ))
		return "\cGBerserker";
	else if( CheckActorInventory( tid, "IsAdmin" ))
		return "\cJAdministrator";
	else if( CheckActorInventory( tid, "HasClass" ))
		return Classes[CheckActorInventory( tid, "ClassID" )][CK_NAME];

	return "";
}

// [Dusk] Function for explicitly setting the amount given inventory item.
// No-op if no change is necessary.
function int SetInventory( str item, int count )
{	int n = count - CheckInventory( item );

	if( n > 0 )
		GiveInventory( item, n );
	else if( n < 0 )
		TakeInventory( item, -n );

	return n;
}

// [Dusk] Exactly the same as SetInventory except operates on someone
// other than the activator.
function int SetActorInventory( int tid, str item, int count )
{	int n = count - CheckActorInventory( tid, item );

	if( n > 0 )
		GiveActorInventory( tid, item, n );
	else if( n < 0 )
		TakeActorInventory( tid, item, -n );

	return n;
}

// [Dusk] Counts how many guardians you have
function int JuggernautCount( void )
{	int n;

	for( int i = 0; i < MAXPLAYERS; i++ )
	{	if( GetPlayerInfo( i, PLAYERINFO_TEAM ) == PlayerTeam() &&
				CheckActorInventory( TID_Player + i, "PowerJuggernaut" ))
			n++;
	}

	return n;
}

// [Dusk] Generic function for an error message
function void Error( str text )
{	LocalAmbientSound( "misc/nope", 127 );
BigMessage( strparam( s: "\cR", s: text ));
}

// [Dusk] Generic big message
function void BigMessage( str text )
{	SetFont( "BIGFONT" );
HudMessage( s: text; HUDMSG_FADEOUT, HID_BIGMESSAGE, CR_WHITE, 0.5, 0.45, 2.0, 1.0 );
}

function void BigMessageBold( str text )
{	SetFont( "BIGFONT" );
HudMessageBold( s: text; HUDMSG_FADEOUT, HID_BIGMESSAGE, CR_WHITE, 0.5, 0.45, 2.0, 1.0 );
}

function void ClearHudMessage( int id )
{	HudMessage( s: ""; HUDMSG_PLAIN, id, 0, 0, 0, 0.001 );
}

function void ReddenSector( int tag )
{	Sector_SetColor( tag, 255, 150, 150 );
}

/* [Dusk] ACS does not have the ?: operator, work around this:
 * a ? b : c <=> cond (a, b, c)
 */
function int cond( int a, int b, int c )
{	if( a )
		return b;

	return c;
}

// ============================================================================
//
function bool CheckActorDistance( int Source, int Target, int Range )
{	// [SP] If either object does not exist, then we're really not close to anything.
	if( ThingCount( T_NONE, Target ) == 0 || ThingCount( T_NONE, Source ) == 0 )
		return false;

	// [SP] Check the distance between two objects using Pythagorean theorum - except do not root the squares, it makes the check faster
	int Dist = msqr( GetActorX( Source ) - GetActorX( Target ) >> 16 );
	Dist += msqr( GetActorY( Source ) - GetActorY( Target ) >> 16 );
	Dist += msqr( GetActorZ( Source ) - GetActorZ( Target ) >> 16 );

	if( Dist <= msqr( Range ) && GetCVar( "aow_debug" ) == 1 )
		Log( s: "I'm close to object ", d: Target );

	if( Dist <= msqr( Range ))
		return true;

	return false;
}

// ============================================================================
// [Dusk] This should be a bit cleaner than the old code.
//
function bool IsPlayerInBase (void)
{
	bool IsInBase;
	int i;
	int dist;

	for (i = 0; i < NUM_BUILDINGS; ++i)
	{
		dist = cond (i != BUILDING_MINIREF, MaxTurretDistance, MaxTurretDistance / 4);
		if (CheckActorDistance (0, GetBuildingTID (i, PlayerTeam()), dist))
		{
			IsInBase = true;
			break;
		}
	}

	if (IsInBase)
	{
		for (i = 0; i < NUM_BUILDINGS; ++i)
		{
			dist = cond (i != BUILDING_MINIREF, MaxTurretDistance, MaxTurretDistance / 4);
			if (CheckActorDistance (0, GetBuildingTID (i, !PlayerTeam()), dist))
			{
				IsInBase = false;
				break;
			}
		}
	}

	return IsInBase;
}

/* ============================================================================
 * [Dusk] Acquire target information. This is encapsulated in a script so
 * as not to interfere with the original script's activator.
 */
script SC_TargetInfo( int type, int value )
{	SetActivatorToTarget( 0 );
	SetResultValue( 0 );

	switch( type )
	{	case TARGETINFO_X:
			SetResultValue( GetActorX( 0 ));
			break;

		case TARGETINFO_Y:
			SetResultValue( GetActorY( 0 ));
			break;

		case TARGETINFO_Z:
			SetResultValue( GetActorZ( 0 ));
			break;

		case TARGETINFO_Health:
			SetResultValue( GetHealth() );
			break;

		case TARGETINFO_Angle:
			SetResultValue( GetActorAngle( 0 ));
			break;

		case TARGETINFO_TID:
			SetResultValue( ActivatorTID() );
			break;

		case TARGETINFO_PlayerNum:
			SetResultValue( PlayerNumber() );
			break;

		case TARGETINFO_SpawnHealth:
			SetResultValue( GetSpawnHealth() );
			break;

		case TARGETINFO_Team:
			SetResultValue( PlayerTeam() );
			break;

		case TARGETINFO_WeaponCheck:
			SetResultValue( CheckWeapon( value ));
			break;

		case TARGETINFO_Name:
			SetResultValue( strparam( n: 0 ));
			break;
	}
}

// [Dusk] Front-ends:
function int GetTargetInfo( int type )
{	return ACS_ExecuteWithResult( SC_TARGETINFO, type );
}

function int CheckTargetWeapon( str type )
{	return ACS_ExecuteWithResult( SC_TARGETINFO, TARGETINFO_WeaponCheck, type );
}
// ============================================================================
// [Dusk] Generic intel message
function void _IntelMessage( str text, bool bold )
{	// Check if it's multi-line
	int multiline = false;

	for( int c = 0; c < strlen( text ); c++ )
	{	if( GetChar( text, c ) == '\n' )
		{	multiline = true;
			break;
		}
	}

	// Determine y-pos
	int ypos = INTEL_YPOS;

	if( multiline )
		ypos = INTEL_YPOS2;

	SetFont( "SMALLFONT" );

	if( bold )
HudMessageBold( s: text;
						HUDMSG_FADEOUT | HUDMSG_LOG, 15000, CR_WHITE,
						INTEL_XPOS, ypos, 2.0, 1.0 );
	else
HudMessage( s: text;
					HUDMSG_FADEOUT | HUDMSG_LOG, 15000, CR_WHITE,
					INTEL_XPOS, ypos, 2.0, 1.0 );
}

function void IntelMessage( str text )
{	_IntelMessage( text, false );
}

function void IntelMessageBold( str text )
{	_IntelMessage( text, true );
}

// ============================================================================
// [Dusk] Returns a string containing a player's name, team and IDX
function str pname( int p )
{	if( p == -1 )
	{	p = PlayerNumber();

		// If PlayerNumber returned -1, this is not a player, thus return
		// whatever n:0 says about this thing.
		if( p == -1 )
			return strparam( n: 0 );
	}


return strparam( n: p + 1, s: " (#", d: p, s: ", ",
				 s: TeamNames[GetPlayerInfo( p, PLAYERINFO_TEAM )], s: ")" );
}

/* ============================================================================
 * [Dusk] AproxDistance: Doom's P_AproxDistance, converted to ACS.
 * It's faster, but less accurate than distance().
 */
function int AproxDistance( int t1, int t2 )
{	int dx = abs( GetActorX( t1 ) - GetActorX( t2 ));
	int dy = abs( GetActorY( t1 ) - GetActorY( t2 ));

	if( dx < dy )
		return dy + ( dx / 2 );

	return dx + ( dy / 2 );
}

// =============================================================================
// [Dusk] Remove the spawn marker of a given player
//
function void RemoveSpawnMarker (int p)
{
	if (!HasSpawnMarker[p])
		return;

	Thing_Remove (TID_SpawnMarker + p);
	HasSpawnMarker[p] = false;
}

// =============================================================================
// [Dusk] Clean way to change a player's team. Don't use Player_SetTeam!
//
function void ChangePlayerTeam( int p, int newteam )
{	if( !PlayerInGame( p ) || GetPlayerTeam( p ) == newteam || newteam < 0 || newteam > 1 )
		return;

	ACS_ExecuteWithResult( 891, p, newteam );
}

// [Dusk] Separate script so as not to mess with the activator.
script SC_ChangePlayerTeam( int p, int newteam )
{	Log( s: pname( p ), s: " is now on ", s: TeamNames[newteam], s: "." );

	SetActivator( TID_Player + p );
	Player_SetTeam( newteam );
	SetInventory( "IsBlue", newteam == TEAM_BLUE );
	SetInventory( "IsRed",  newteam == TEAM_RED );

	// If they are in field right now, send them to their new team's base,
	// otherwise, into the spawn room.
	if( CheckInventory( "IsInSpawnRoom" ))
		Teleport( 70 + ( newteam == TEAM_RED ));
	else
		Teleport( 1 + ( newteam == TEAM_RED ));

	// If they were carrying a beacon, swap that now.
	if( CheckInventory( "IonCannonBeacon" ) || CheckInventory( "NuclearStrikeBeacon" ))
	{	SetInventory( "IonCannonBeacon", newteam == TEAM_BLUE );
		SetInventory( "NuclearStrikeBeacon", newteam == TEAM_RED );
	}

	// Their spawn marker is now invalidated
	RemoveSpawnMarker (p);
}