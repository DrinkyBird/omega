// All Out War 2 Class purchase scripts
// Credit to VoltlocK for originally creating the engine
// With modifications by Eruanna, Dusk and the Omega Team

// You may use portions of this script in your project as long as you give credit where credit is
// due. Please don't be lame and just copy-paste any of this and call it your own. Thanks!
// [Dusk] Rewritten pretty much entirely

// -----------------------------------------------------------------------------
// [Dusk] Adds an item to a class definition and bumps up CK_NUMITEMS
function void AddClassItem (int class, str item, int amount) {
	// Get the amount of current items, from this we can figure
	// where in the array do we insert the new item
	int n = Classes[class][CK_NUMITEMS];
	int p = CK_NUMITEMS + 1 + (n * 2);
	
	// Add in the stuff
	Classes[class][p] = item;
	Classes[class][p + 1] = amount;
	Classes[class][CK_NUMITEMS]++;
}

// -----------------------------------------------------------------------------
function str GetClassItemName (int class, int inum) {
	int p = CK_NUMITEMS + 1 + (inum * 2);
	return Classes[class][p];
}

// -----------------------------------------------------------------------------
function int GetClassItemAmount (int class, int inum) {
	int p = CK_NUMITEMS + 1 + (inum * 2);
	return Classes[class][p + 1];
}

// -----------------------------------------------------------------------------
function void InitClasses (void) {
	int c;
	
	// Init C4 and grenades to 1 globally
	for (c = 0; c < NUM_CLASSES; c++) {
		Classes[c][CK_C4] = 1;
		Classes[c][CK_GERNADES] = 1;
		Classes[c][CK_SPEED] = 1.0;
	}
	
	LoadClassDefinitions ();
}

// -----------------------------------------------------------------------------
function void PurchaseClass (int c) {
	int team = PlayerTeam ();
	int cost = Classes[c][CK_COST];
	
	// [SP] This is to fix the "double cost" bug
	if (Timer() - LastMenu[PlayerNumber()] < 5)
		return;
	
	LastMenu[PlayerNumber()] = Timer();
	
	if (CheckInventory ("HasClass")) {
		Error ("You need to resign first!");
		
		if (GetLevelInfo (LEVELINFO_LEVELNUM) == 20 || GetLevelInfo (LEVELINFO_LEVELNUM) == 21)
			ThrustThing((VectorAngle(GetActorVelX(0), GetActorVelY(0)) >> 8) + 128, 25, 0, 0);
		
		return;
	}
	
	// Show class information on the first press.
	if ((GetLevelInfo (LEVELINFO_LEVELNUM) != 20 && GetLevelInfo (LEVELINFO_LEVELNUM) != 21)) {
		if (!CheckInventory("PurchaseToken")) {
			ACS_ExecuteWithResult (330, cost);
			DrawClassInfoText (c);
			ACS_ExecuteAlways (956, 0);
			return;
		} else {
			// [Dusk] Clear the card out once the class is purchased
			HudMessage(s:""; HUDMSG_PLAIN, 2100+PlayerNumber(), CR_UNTRANSLATED, 0.0, 0.0, 0.01);
		}
	}
	
	// Check monies
	if (!CheckCredits (cost))
		return;
	
	// Check dependencies
	int dep = Classes[c][CK_DEP];
	if (!IsAdmin[PlayerNumber()]) {
		if ((dep == DEP_BARRACKS || dep == DEP_CENTRE) && !GotBarracks[Team]) {
			Error ("Your \cFbarracks\c- has been destroyed!");
			return;
		}
		
		if (dep == DEP_CENTRE && !GotPlant[Team]) {
			Error ("Your \cFresearch centre\c- has been destroyed!");
			return;
		}
		
		if (dep == DEP_REFINERY && !GotRefinery[Team]) {
			Error ("Your \cFrefinery\c- has been destroyed!");
			return;
		}
	}
	
	int cflags = Classes[c][CK_FLAGS];
	
	TakeInventory ("PurchaseToken",1);
	DisplayTick ();
	SpendCredits (cost);
	SetFont ("BigFont");
	HudMessage (s:"You are a \cf", s:Classes[c][CK_NAME], s:"!";
		HUDMSG_FADEOUT, 1800, CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	// The essentials
	SetActorProperty (0, APROP_SPEED, Classes[c][CK_SPEED]);
	SetArmorGrade (Classes[c][CK_ARMORNUM], Classes[c][CK_ARMORMOD]);
	GiveInventory ("HasClass", 1);
	GiveInventory ("NewClipAmmo", 160);
	GiveInventory ("Handgun", 1);
	GiveInventory ("SpawnInvulnerability", 1);
	GiveInventory ("ClassID", c);
	GiveInventory ("Refunds", cost / 2);
	
	if (Classes[c][CK_C4] > 0) {
		GiveInventory ("TimedC4", Classes[c][CK_C4]);
		GiveInventory ("TimedC4Count", Classes[c][CK_C4]);
		
		if (cflags & CF_ENHANCEDC4)
			GiveInventory ("EnhancedTimedC4", 1);
	}
	
	SetFragGrenades (Classes[c][CK_GERNADES]);
	
	// Item list
	log (d:Classes[c][CK_NUMITEMS], s:" items");
	for (int i = 0; i < Classes[c][CK_NUMITEMS]; ++i) {
		str itemname = GetClassItemName (c, i);
		int itemamount = GetClassItemAmount (c, i);
		log (d:itemamount, s:" of ", s:itemname);
		GiveInventory (itemname, itemamount);
		
		// First item defined is the primary weapon, set it:
		if (i == 0)
			SetWeapon (itemname);
	}
	
	if (cflags & CF_CANTPILOT)
		GiveInventory ("HighUpgrade", 1);
	
	// Medic regeneration
	if (cflags & CF_HEALTHREGEN)
		ACS_ExecuteAlways (352, 0);
	
	// Class-specific exceptions:
	switch (c) {
	case CLASS_STEALTH:
		// Stealth trooper sounds
		SetActorProperty (0, APROP_DeathSound, "stealth/death");
		ACS_ExecuteAlways (918, 0, 0);
		break;
	
	case CLASS_CHEMWARRIOR:
		ACS_ExecuteAlways (918, 0, 1);
		break;
	
	case CLASS_SHOCKTROOPER:
		ACS_ExecuteAlways (918, 0, 2);
		break;
	
	case CLASS_SUICIDEBOMBER:
		HudMessage (s:"Use the switch to explode violently.";
			HUDMSG_FADEOUT, 1840, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
	case CLASS_COMMANDO:
		ACS_ExecuteAlways (918, 0, 3);
		break;
	
	case CLASS_SNIPER:
		GiveInventory ("IsSniper", 1);
		break;
	
	case CLASS_UTILITYGUY:
		HudMessage(s:"Use \cFAlt-Fire\cD for \cNitem selection menu!";
			HUDMSG_FADEOUT, 1840, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
		break;
	
	case CLASS_JUMPJET:
		HudMessage(s:"Use Alt-Fire to activate JumpJet";
			HUDMSG_FADEOUT, 1840, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
		break;
	}
	
	ACS_ExecuteAlways (91, 0);
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = Classes[c][CK_SPEED];
	Log (n:0, s:" becomes ", s:Classes[c][CK_NAME]);
}

// -----------------------------------------------------------------------------
// [Dusk] Delayed class sounds - in a script since functions cannot have latency.
// These sounds are only played locally now.
script 918 (int n) {
	delay (6 * TICRATE);
	
	switch (n) {
	case 0:
		LocalAmbientSound ("misc/stealth", 127);
		break;
	
	case 1:
		LocalAmbientSound ("misc/chem", 127);
		break;
	
	case 2:
		LocalAmbientSound ("misc/volt", 127);
		break;
	
	case 3:
		LocalAmbientSound ("misc/commando", 127);
		break;
	}
}

// -----------------------------------------------------------------------------
script 20 (int Team) PurchaseClass (CLASS_GUNMAN);
script 21 (int Team) PurchaseClass (CLASS_ENGINEER);
script 22 (int Team) PurchaseClass (CLASS_MINIGUNNER);
script 23 (int Team) PurchaseClass (CLASS_TECHNICIAN);
script 24 (int Team) PurchaseClass (CLASS_FLAMER);
script 25 (int Team) PurchaseClass (CLASS_RIFLEMAN);
script 26 (int Team) PurchaseClass (CLASS_MACHINEGUNNER);
script 27 (int Team) PurchaseClass (CLASS_GRENADIER);
script 28 (int Team) PurchaseClass (CLASS_ROCKETEER);
script 29 (int Team) PurchaseClass (CLASS_STEALTH);
script 33 (int Team) PurchaseClass (CLASS_GAUSSGUNNER);
script 34 (int Team) PurchaseClass (CLASS_CHEMWARRIOR);
script 35 (int Team) PurchaseClass (CLASS_SHOCKTROOPER);
script 36 (int Team) PurchaseClass (CLASS_COMMANDO);
script 38 (int Team) PurchaseClass (CLASS_SHOTGUNNER);
script 62 (int Team) PurchaseClass (CLASS_SUICIDEBOMBER);
script 40 (int Team) PurchaseClass (CLASS_SNIPER);
script 41 (int Team) PurchaseClass (CLASS_UTILITYGUY);
script 42 (int Team) PurchaseClass (CLASS_DEMOEXPERT);
script 43 (int Team) PurchaseClass (CLASS_MEDIC);
script 44 (int Team) PurchaseClass (CLASS_LASERCHAINGUNNER);
script 52 (int Team) PurchaseClass (CLASS_JUMPJET);

//---------------------------PLASMA CANNON
script 37 (int Team)
{
	int cost = 1500;
	if (MitigateDoublePress()) terminate;
	if (!CheckBarracks(Team)) terminate;
	if (!CheckPlant(Team)) terminate;
	if (!CheckPlasmaCooldown()) terminate;
	
	if(CheckInventory("PlasmaCannon")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You already have a \cnPlasma Cannon\cr!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if (NumPlasmaCannons[Team] >= MaxCannonsPerTeam && MaxCannonsPerTeam != -1) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"Your team already has too many of those!"; 
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if (Timer() < CannonPurchaseDelay) {
		DisplayCross();
		SETFONT("BigFont");
		//int mins = (CannonPurchaseDelay - Timer())/(35*60);
		//int secs = 59 - (Timer()/35)%60;

		HudMessage(s:"You must wait \cF", d:(CannonPurchaseDelay - Timer()) / 60,
			s:" seconds\nbefore you can get one of these!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);		
		terminate;
	}
	
	if (!IsSecondPress("WEAP01", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	
	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	LastPurchasedCannon[PlayerNumber()+1] = Timer();
	NumPlasmaCannons[Team]++;
	
	DisplayTick();
	SetFont ("BIGFONT");
	HudMessage(s:"You got \cnPlasma Cannon!"; HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	GiveInventory("PlasmaCannon",1);
	GiveInventory("PlasmaCannonAmmo",10);
	SetWeapon("PlasmaCannon");
	Log(n:0, s:" purchases Plasma Cannon.");
	RecountPlasma();
}

//---------------------------T-E 21cal RIFLE
script 49 (int Team)
{
	int cost = 300;
	if (MitigateDoublePress()) terminate;

	if (CheckInventory("TiberiumAutorifleWeak") || CheckInventory("TiberiumAutorifle")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You already have a \cdTiberium Autorifle!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if (!IsSecondPress("WEAP02", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	
	TakeInventory("PurchaseToken",1);
	SpendCredits (300);
	DisplayTick();
	
	SETFONT("BigFont");
	HudMessage(s:"You got the \cqTiberium Autorifle!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	// GiveInventory("Refunds", 100);
	GiveInventory("TiberiumAutorifleWeak", 1);
	GiveInventory("TE21CalAmmo", 200);
	SetWeapon("TiberiumAutorifleWeak");
	Log(n:0, s:" purchases Tiberium Autorifle.");
}

//---------------------------CHAINSAW (was flashbangs)
script 50 (int Team) {
	int cost = 250;
	if (MitigateDoublePress()) terminate;
	if (CheckInventory("EagerBeaver")) {
		DisplayCross ();
		SetFont ("BIGFONT");
		HudMessage (s:"You already have the \cfChainsaw!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if (!IsSecondPress("WEAP03", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	
	TakeInventory ("PurchaseToken", 1);
	SpendCredits (cost);
	DisplayTick ();
	
	SetFont ("BIGFONT");
	HudMessage(s:"You got the \cfChainsaw!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	HudMessage(s:"Use Alt-Fire to throw the chainsaw!";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.5, 2.0, 1.0);
	
	GiveInventory ("EagerBeaver", 1);
	SetWeapon ("EagerBeaver");
	Log (n:0, s:" purchases Chainsaw.");
}

// ARTILLERY CANNON
script 51 (int Team) {
	int cost = 550;
	if (MitigateDoublePress()) terminate;
	if(CheckInventory("ArtilleryCannon")) {
		DisplayCross();		
		SETFONT("BigFont");
		HudMessage(s:"You already have an \cKArtillery Cannon!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);		
		terminate;
	}
	
	if (!IsSecondPress("WEAP04", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You got the \ckArtillery Cannon!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	HudMessage(s:"Use Alt-Fire for \cFAnti-Mech shells!";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.5, 2.0, 1.0);
	
	// GiveInventory("Refunds", 200);
	GiveInventory ("ArtilleryCannon", 1);
	GiveInventory ("ArtilleryShellAmmo", 40);
	SetWeapon ("ArtilleryCannon");
	Log(n:0, s:" purchases artillery cannon.");
}

//---------------------------TIBERIUM AUTORIFLEMAN
script 53 (int Team) {
	int cost = 400; int speed = 0.8;
	if (MitigateDoublePress()) terminate;
	if (!CheckBarracks(Team)) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS24", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are a \cfTiberium Autorifleman!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (1, ARMOD_CHEM);
	GiveInventory("HasClass",1);
	GiveInventory("Refunds",cost/2);
	GiveInventory("NewClipAmmo",90);
	GiveInventory("Handgun",1);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	GiveInventory("TE21CalAmmo",200);
	SetFragGrenades (2);
	GiveInventory("TiberiumAutorifle",1);
	SetWeapon("TiberiumAutorifle");
	ACS_ExecuteAlways(91, 0);
	
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_TIBRIFLE);
	
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes Tiberium autorifleman.");
}

//---------------------------DOUBLE SHOTGUNNER
script 54 (int Team) {
	int cost = 200; int speed = 0.8;
	if (MitigateDoublePress()) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS25", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are a \cfSuper Shotgunner!"; HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (1, ARMOD_NOCHANGE);
	GiveInventory("HasClass",1);
	GiveInventory("Refunds",cost/2);
	GiveInventory("NewClipAmmo",90);
	GiveInventory("Handgun",1);
	GiveInventory("ShotgunAmmo",50);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	SetFragGrenades (1);
	ACS_ExecuteAlways(91, 0);
	GiveInventory("DoubleShotgun",1);
	SetWeapon("DoubleShotgun");
	
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_DOUBLESHOTGUNNER);
	
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes super shotgunner.");
}

//-------------------- BLUE TEAM SUPERWEAPON
//---------------------------ION CANNON BEACON
script 55 (int Team) {
	if (PlayerTeam() == TEAM_RED) {
		// [Dusk] this message should never be displayed in casual games
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"What the \cRfuck\c- are you doing here?";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	int cost = 1750;
	if (MitigateDoublePress()) terminate;

	if(CheckInventory("IonCannonBeacon")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You already have the \cnIon Cannon Beacon\cr!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);		
		terminate;
	}
	
	BlueBeaconTime=BeaconPurchaseDelay-(Timer()-LastPurchasedBeacon[1])/35;
	if (BlueBeaconTime <= 0)
		BlueBeaconCooldown = false;
	else
		BlueBeaconCooldown = true;
	
	if(BlueBeaconCooldown) {
		int mins = BlueBeaconTime/60 - Timer()/(35*60);
		int secs = 59 - (Timer()/35)%60;
		
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You must wait \cF", d:BlueBeaconTime, s:" seconds\nbefore you can get one of these!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);		
		terminate;
	}
	
	if (!IsSecondPress("WEAP05", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	LastPurchasedBeacon[1] = Timer();
	TakeInventory("PurchaseToken",1);
	SpendCredits (1750);
	
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You got the \cnIon Cannon Beacon!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_WHITE, 0.5, 0.45, 2.0, 1.0);
	SetFont ("SMALLFONT");
	HudMessage(s:"Place this in front of an \cAenemy MCT\cJ and guard";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_WHITE, 0.5, 0.6, 5.0, 1.0);
	HudMessage(s:"it for \cU60 seconds\cJ for \cKcertain destruction!";
		HUDMSG_FADEOUT, 1880+PlayerNumber(), CR_WHITE, 0.5, 0.625, 5.0, 1.0);
	
	GiveInventory("IonCannonBeacon",1);
	SetWeapon("IonCannonBeacon");
	
	BlueBeaconCooldown = True;
	Log(n:0, s:" purchases Ion Cannon Beacon.");
}

//-------------------- RED TEAM SUPERWEAPON
//---------------------------NUCLEAR STRIKE BEACON
script 56 (int Team) {
	if (PlayerTeam() == TEAM_BLUE) {
		// [Dusk] this message should never be displayed in casual games
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"What the fuck are you doing here?";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	int cost = 1750;
	if ( MitigateDoublePress() ) terminate;

	RedBeaconCooldown = true;
	RedBeaconTime = BeaconPurchaseDelay-(Timer()-LastPurchasedBeacon[2])/35;
	if (RedBeaconTime <= 0)
		RedBeaconCooldown = false;
	

	if(CheckInventory("NuclearStrikeBeacon")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You already have the \ckNuclear Strike Beacon\cr!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if(RedBeaconCooldown) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You must wait \cF", d:RedBeaconTime, s:" seconds\nbefore you can get one of these!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;	
	}	
	
	if (!IsSecondPress("WEAP06", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	LastPurchasedBeacon[2] = Timer();
	TakeInventory("PurchaseToken",1);
	SpendCredits (1750);
	DisplayTick();
	
	SETFONT("BigFont");
	HudMessage(s:"You got the \cANuclear Strike Beacon!"; HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_WHITE, 0.5, 0.45, 2.0, 1.0);
	SetFont ("SMALLFONT");
	HudMessage(s:"Place this in front of an \cAenemy MCT\cJ and guard";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_WHITE, 0.5, 0.6, 5.0, 1.0);
	HudMessage(s:"it for \cU60 seconds\cJ for \cKcertain destruction!";
		HUDMSG_FADEOUT, 1880+PlayerNumber(), CR_WHITE, 0.5, 0.625, 5.0, 1.0);
	
	GiveInventory ("NuclearStrikeBeacon", 1);
	SetWeapon ("NuclearStrikeBeacon");

	RedBeaconCooldown = True;
	Log(n:0, s:" purchases Nuclear Strike Beacon.");
}

//---------------------------ARMOUR/DAMAGE UPGRADE
script 57 (int Team) {
	int cost = 250;
	if (MitigateDoublePress()) terminate;
	
	if (CheckInventory ("IsCommando")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage (s:"no u :I";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if(CheckInventory("HasArmorUpgrade")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage (s:"You already have this \ccupgrade!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	if (!IsSecondPress("UPGR01", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);

	DisplayTick();
	
	SETFONT("BigFont");
	HudMessage(s:"You got the \ckarmor upgrade!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	HudMessage(s:"You can no longer pilot mechs.";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.5, 2.0, 1.0);
	
	GiveInventory("Refunds", 200);
	GiveInventory("HasArmorUpgrade", 1);
	GiveInventory("HighUpgrade", 1);
	SetArmorGrade (1, AGF_ADDITIVE);
	Log(n:0, s:" purchases armour/damage upgrade.");
}

//---------------------------PLASMA GUNNER
script 60 (int Team) {
	int cost = 800; int speed = 0.7;
	if (MitigateDoublePress()) terminate;
	if (!CheckBarracks(Team)) terminate;
	if (!CheckPlant(Team)) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS26", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	GiveInventory("HasClass",1);
	GiveInventory("Refunds", cost/2);
	TakeInventory("PurchaseToken",1);
	SpendCredits (800);
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are a \cfPlasma Gunner!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (2, ARMOD_LASER);
	GiveInventory("HighUpgrade",1);
	GiveInventory("NewClipAmmo",90);
	GiveInventory("Handgun",1);
	GiveInventory("PlasmaRifleAmmo",200);
	GiveInventory("EnhancedTimedC4",1);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	SetFragGrenades (2);
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_PLASMAGUNNER);
	GiveInventory("PlasmaGun",1);
	SetWeapon("PlasmaGun");
	
	ACS_ExecuteAlways(91, 0);
	
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes Plasma Gunner.");
}

// ARTILLERY SOLDIER
script 61 (int Team) {
	int cost = 600; int speed = 0.7;
	if (MitigateDoublePress()) terminate;
	if (!CheckBarracks(Team)) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS27", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	
	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	DisplayTick();

	SETFONT("BigFont");
	HudMessage(s:"You are an \cfArtillery Soldier!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	HudMessage(s:"Use Alt-Fire for \cFAnti-Mech shells!";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.5, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (2, ARMOD_EXPLO);
	GiveInventory("HasClass",1);
	GiveInventory("Refunds",cost/2);
	GiveInventory("IsArtillerySoldier",1);
	GiveInventory("HighUpgrade",1);
	GiveInventory("NewClipAmmo",60);
	GiveInventory("Handgun",1);
	GiveInventory("EnhancedTimedC4",1);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	GiveInventory("Rifle",1);
	GiveInventory("RifleAmmo",20);
	GiveInventory("RifleGrenadeAmmo",2);
	GiveInventory("ArtilleryShellAmmo",30);
	SetFragGrenades (2);
	GiveInventory("ArtilleryCannon",1);
	SetWeapon("ArtilleryCannon");
	ACS_ExecuteAlways(91, 0);
	
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_ARTILLERY);
	
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes artillery soldier.");
}

//---------------------------TIME COP
script 39 (int Team) {
	int cost = 2000; int speed = 0.9;
	if (MitigateDoublePress()) terminate;
	if (!CheckBarracks(team)) terminate;
	if (!CheckPlant(team)) terminate;
	if (MaxTimeCopsPerTeam > 0 && NumTimeCops[team] >= MaxTimeCopsPerTeam) {
		DisplayCross();
		SETFONT("BigFont");
		if (MaxTimeCopsPerTeam == 1) {
			HudMessage(s:"You already have a time cop in-field!";
				HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		} else {
			HudMessage(s:"You already have ", d:NumTimeCops[team], s:" time cops in-field!";
				HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		}
		
		if (GetLevelInfo (LEVELINFO_LEVELNUM) == 20)
			ThrustThing((VectorAngle(GetActorVelX(0), GetActorVelY(0)) >> 8) + 128, 25, 0, 0);
		terminate;
	}
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS29", cost)) terminate;
	if (!CheckCredits(cost)) terminate;
	
	TakeInventory("PurchaseToken",1);
	SpendCredits (cost);
	
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are the \cFTime Cop!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	SetActorProperty (0, APROP_SPEED, speed);
	SetArmorGrade (2, ARMOD_NOCHANGE);
	GiveInventory ("HasClass", 1);
	GiveInventory ("HighUpgrade", 1);
	GiveInventory ("Refunds", cost/2);
	GiveInventory ("NewClipAmmo", 120);
	GiveInventory ("Handgun", 1);
	GiveInventory ("EnhancedTimedC4", 1);
	GiveInventory ("TimedC4", 2);
	GiveInventory ("TimedC4Count", 2);
	SetFragGrenades (4);
	GiveInventory ("SpawnInvulnerability", 1);
	GiveInventory ("ClassID", CLASS_TIMECOP);
	GiveInventory("MachineGunAmmo", 50);
	GiveInventory("MachineGun", 1);
	GiveInventory ("TimeGun", 1);
	GiveInventory ("TimeGunAmmo", 100);
	SetWeapon ("TimeGun");
	ACS_ExecuteAlways(91, 0);
	
	ACS_ExecuteAlways (961, 0, Team);
	
	PlayerSpeeds[PlayerNumber()] = speed;
	Log (n:0, s:" becomes Time Cop.");
	RecountTimeCops();
	
	Delay(35*6);
	ActivatorSound("misc/commando",255);
}

//---------------------------TIBERIUM HARVESTER //Advanced
script 63 (int Team) {
	int cost = 750; int speed = 0.8;
	if (MitigateDoublePress()) terminate;
	if (!CheckRefinery(Team)) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS30", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	GiveInventory("HasClass",1);
	GiveInventory("Refunds", cost/2);
	TakeInventory("PurchaseToken",1);
	SpendCredits (750);
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are an \cfAdvanced Tiberium Harvester!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.4, 2.0, 1.0);
	HudMessage(s:"Pick-up \cctiberium crystals \cdand";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.6, 2.0, 1.0);
	HudMessage(s:"return them to your \ccrefinery \cdfor cash!";
		HUDMSG_FADEOUT, 1880+PlayerNumber(), CR_GREEN, 0.5, 0.65, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (1, ARMOD_CHEM);
	GiveInventory("HighUpgrade",1);
	GiveInventory("IsHarvester",1);
	GiveInventory("TiberiumProof",1);
	GiveInventory("Grade0Damage",1);
	GiveInventory("NewClipAmmo",200);
	GiveInventory("Handgun",1);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	SetFragGrenades (2);
	GiveInventory("MachineGunAmmo",160);
	GiveInventory("SubMachineGun",1);
	GiveInventory("MachineGun",1);
	SetWeapon("MachineGun");
	ACS_ExecuteAlways(91, 0);
	
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_ADVHARVESTER);
				
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes advanced Tiberium Harvester.");
	Delay(35*6);
	ActivatorSound("misc/chem",255);
}

//---------------------------TIBERIUM HARVESTER //Free
script 64 (int Team) {
	int cost = 0; int speed = 0.65;
	if (MitigateDoublePress()) terminate;
	if (!CheckRefinery(Team)) terminate;
	if (!IsResigned()) terminate;
	if (!IsSecondPress("CLSS28", cost)) terminate;
	if (!CheckCredits(cost)) terminate;

	GiveInventory("HasClass",1);
	TakeInventory("PurchaseToken",1);
	SpendCredits (0);
	DisplayTick();
	SETFONT("BigFont");
	HudMessage(s:"You are a \cfTiberium Harvester!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.4, 2.0, 1.0);
	HudMessage(s:"Pick-up \cctiberium crystals \cdand";
		HUDMSG_FADEOUT, 1840+PlayerNumber(), CR_GREEN, 0.5, 0.6, 2.0, 1.0);
	HudMessage(s:"return them to your \ccrefinery \cdfor cash!";
		HUDMSG_FADEOUT, 1880+PlayerNumber(), CR_GREEN, 0.5, 0.65, 2.0, 1.0);
	
	//Set Statistics
	SetActorProperty(0,APROP_SPEED,speed);
	SetArmorGrade (0, ARMOD_CHEM);
	GiveInventory("IsHarvester",1);
	GiveInventory("TiberiumProof",1);
	GiveInventory("Grade0Damage",1);
	GiveInventory("NewClipAmmo",200);
	GiveInventory("Handgun",1);
	GiveInventory("TimedC4",1);
	GiveInventory("TimedC4Count",1);
	SetFragGrenades (1);
	GiveInventory("SubMachineGun",1);
	GiveInventory("SpawnInvulnerability",1);
	GiveInventory ("ClassID", CLASS_HARVESTER);
	SetWeapon("SubMachineGun");
	ACS_ExecuteAlways(91, 0);
				
	ACS_ExecuteAlways (961, 0, Team);
	PlayerSpeeds[PlayerNumber()] = speed;
	Log(n:0, s:" becomes Tiberium harvester.");
	Delay(35*6);
	ActivatorSound("misc/chem",255);
}

script 961 (int team) {
	int tries, i;
	bool failed = true;
	
	if (GetLevelInfo (LEVELINFO_LEVELNUM) == 20 || GetLevelInfo (LEVELINFO_LEVELNUM) == 21) {
		for (i = 0; i <= 9; i++) {
			if (Teleport_NoStop (1 + team, 0)) {
				failed = false;
				break;
			}
		}
	} else {
		for (i = 0; i <= 9; i++) {
			if (Teleport (1 + team)) {
				failed = false;
				break;
			}
		}
	}
	
	if (failed) {
		HudMessage (s:"In-field teleportation \cAfailed\cJ - use the\n\cDTeleport back to Field\cJ -terminal";
			HUDMSG_FADEOUT, 15000, CR_WHITE,
			INTEL_XPOS, INTEL_YPOS2, 5.0, 1.0);
			terminate;
	} else
		TakeInventory ("IsInSpawnRoom", 1);
}

function str GetSpeedMeter (int c) {
	int speed = Classes[c][CK_SPEED];
	str msg = strparam (s:"\cU[", s:FractionColor (speed - 0.5, 0.5));
	bool darkened = false;
	
	for (int i = 0; i < 10; ++i) {
		int step = 0.5 + (i * 0.05);
		if (step > Classes[c][CK_SPEED] && !darkened) {
			msg = strparam (s:msg, s:"\cM");
			darkened = true;
		}
		
		msg = strparam (s:msg, s:"I");
	}
	
	msg = strparam (s:msg, s:"\cU]");
	return msg;
}

function void DrawClassInfoText (int c) {
	int cflags = Classes[c][CK_FLAGS];
	int cspeed = Classes[c][CK_SPEED];
	
	SetFont ("BIGFONT");
	HUDMessage (s:Classes[c][CK_NAME];
		HUDMSG_FADEOUT, 1090, CR_WHITE, -0.3, -0.3, 5.0, 1.0);
	
	SetFont ("SMALLFONT");
	str body = strparam (s:"Cost: \cQ$\cD", d:Classes[c][CK_COST],
		s:"\nSpeed: ", s:GetSpeedMeter (c), s:" ", s:FractionColor (cspeed - 0.5, 0.5), d:(cspeed * 100) >> 16, s:"\cJ%",
		s:"\nArmor: Grade ", d:Classes[c][CK_ARMORNUM], s:" ", s:ArmorModifierName (Classes[c][CK_ARMORMOD]),
		s:"\nC4: ", d:Classes[c][CK_C4], s:cond (cflags & CF_ENHANCEDC4, "+", ""),
		s:"\nGrenades: ", d:Classes[c][CK_GERNADES], s:"\n");
	
	for (int i = 0; i < Classes[c][CK_NUMITEMS]; ++i) {
		str item = GetClassItemName (c, i);
		int amount = GetClassItemAmount (c, i);
		
		body = strparam (s:body, s:"\n- ", d:amount, s:"x ", s:item);
	}
	
	HUDMessage (s:body;
		HUDMSG_FADEOUT, 1091, CR_WHITE, -0.3, -0.35, 5.0, 1.0);
}