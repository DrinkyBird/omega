// BUILDING HUD CODE
script 930( int what, int team ) {
	if( ActivatorTID() == 0 )
		terminate;
		
	int update = false;
	
	// Check did the health percentage change.
	int LastHealth = CheckInventory( "TerminalLastHealth" );
	int perc = BuildingHealth( ActivatorTID() );
	
	if( perc == LastHealth )
		terminate;
	
	// Store the new "last health"
	SetInventory( "TerminalLastHealth", perc );
	
	DrawBuildingHud();
}

function void DrawBuildingHud( void ) {
	SetFont( "SMALLFONT" );
	int y = -0.4;
	int team, b, tid;
	int i = 8850;
	
	for( team = 0; team < 2; ++team ) {
		str textcolo = GetTeamProperty( team, TPROP_TextColor );
		str name = TeamNames[team];
		
		for( b = 0; b < 9; ++b ) {
			tid = GetBuildingTid( b, team );
			
			if( IsMinorBuilding( b )) {
				HudMessageBold( s:ExistsBuildingGreen( tid ), s:"++",
					s:ExistsBuilding( tid ), s:GetBuildingName( b, team ), s:"\cc: ",
					s:ColorCodeHealth( BuildingHealth( tid )),
					d:BuildingHealth( tid ), s:"\cc%\n";
					HUDMSG_PLAIN, i++, CR_GRAY, 0.012, y, 0.0 );
			} else {
				HudMessageBold( s:ExistsBuilding( tid ),
					s:GetBuildingName( b, team ), s:"\cc: ",
					s:ColorCodeHealth( BuildingHealth( tid )),
					d:BuildingHealth( tid ), s:"\cc%\n";
					HUDMSG_PLAIN, i++, CR_GRAY, 0.012, y, 0.0 );
			}
			
			y += -SMALLSPACE;
		}
		
		HudMessageBold( s:PortalLinkColor( TEAM_BLUE, 0 ), s:"++",
			s:PortalLinkColor( TEAM_BLUE, 1 ), s:"Portal\cc: ",
			s:ColorCodeHealth( BuildingHealth( TID_PORTAL_BLUE1 )),
			d:BuildingHealth( TID_PORTAL_BLUE1 ), s:"\cc% / ",
			s:ColorCodeHealth( BuildingHealth( TID_PORTAL_BLUE2 )),
			d:BuildingHealth( TID_PORTAL_BLUE2 ), s:"\cc%";
			HUDMSG_PLAIN, i++, CR_BLUE, 0.012, y, 0.0 );
		
		y += 2 * -SMALLSPACE;
	}
	
	if( SuddenDeath || TicketPool ) {
		SetFont( "SMALLFONT" );
		HudMessageBold(
			s:"\cFLives\cC: ", s:FractionColor( Tickets[TEAM_BLUE], StartingTickets ), d:Tickets[TEAM_BLUE],
			s:"\n\cGLives\cC: ", s:FractionColor( Tickets[TEAM_RED], StartingTickets ), d:Tickets[TEAM_RED];
			HUDMSG_PLAIN, 8852, CR_BLUE, 0.012, 0.4, 0.0 );
	}
}

function int BuildingHealth( int tid ) {
	if( ThingCount( T_NONE, tid ) == 0 )
		return 0;
	
	int p = (( GetActorHealth( tid ) * 99 ) / GetActorSpawnHealth( tid )) + 1;
	
	if( p < 0 )
		p = 0;
	
	return p;
}

function str PortalLinkColor( int team, int teamcolor ) {
	int t1 = TID_PORTAL_BLUE1 + 2 * team;
	int t2 = TID_PORTAL_BLUE2 + 2 * team;
	
	if( ThingCount( T_NONE, t1 ) && ThingCount( T_NONE, t2 ) ) {
		if( !teamcolor )
			return "\cD";
		
		if( team == TEAM_BLUE )
			return "\cF";
		
		return "\cG";
	}
	
	return "\cM";
}

function str ColorCodeHealth( int Percentage ) {
	if( Percentage == 100 ) // 100%
		return "\cq";
	else if( Percentage > 75 ) // healthy
		return "\cd";
	else if( Percentage > 50 ) // moderate
		return "\cf";
	else if( Percentage > 25 ) // low
		return "\ci";
	else if( Percentage > 0 ) // critical
		return "\cr";
	
	return "\cm"; //destroyed
}

function str ExistsBuilding( int tid ) {
	if( tid <= 199 || ( tid >= 900 && tid % 2 == 1 )) {
		if( ThingCount( T_NONE, tid ) > 0 )
			return "\cF";
		else
			return "\cM";
	} else {
		if( ThingCount( T_NONE, tid ) > 0 )
			return "\cG";
		else
			return "\cM";
	}
	
	return "\cU";
}

function str ExistsBuildingGreen( int tid ) {
	if( ThingCount( T_NONE, tid ))
		return "\cD";
	
	return "\cM";
}