// All Out War 2 Inventory item scripts
// Credit to VoltlocK for originally creating the AOW2 engine,
// with modifications by Eruanna, Dusk and the Omega Team

// You may use portions of this script in your project as long as you give credit where credit is
// due. Please don't be lame and just copy-paste any of this and call it your own. Thanks!

script SC_InventoryItemUse( int action, int team )
{	int x, y, z;
	str marine;

	switch( action )
	{	case INVITEM_Beacon:
			/* Plant superweapon beacon */
			if( ActivatorTID() < TID_Player || ActivatorTID() >= ( TID_Player + MAXPLAYERS ))
				terminate;

			/* To prevent accidental planting, nukes must be double-used. */
			if( !CheckInventory( "BeaconUseToken" ))
			{	GiveInventory( "BeaconUseToken", 1 );
				ActivatorSound( "beacon/safetylock", 80 );
				SetFont( "BIGFONT" );
				HudMessage( s: "BEACON SAFETY LOCK DISENGAGED";
					HUDMSG_FADEOUT, 0, CR_RED,
					0.1, 0.95, 2.0, 0.25 );

				delay( 2 * 35 );
				TakeInventory( "BeaconUseToken", 1 );
				terminate;
			}

			/* Begin planting sequence */
			TakeInventory( "BeaconUseToken", 1 );
			SetPlayerProperty( 0, 1, PROP_TOTALLYFROZEN );

			/* Wait 5 seconds. We have to iterate the delay second by second so that
			 * if the player dies, this gets cancelled properly. */
			for( int i = 0; i < 5; ++i )
			{	delay( 35 );

				if( GetHealth() <= 0 )
					terminate;
			}

			/* Spawn the nuke beacon. */
			if( PlayerTeam() == TEAM_BLUE )
				SpawnProjectile( ActivatorTID(), "IonBeaconThrown", 0, 0, -5, 1, 0 );
			else
				SpawnProjectile( ActivatorTID(), "NukeBeaconThrown", 0, 0, -5, 1, 0 );

			/* Thaw the player now and write this event to the server log. */
			str nukename = cond( PlayerTeam() == TEAM_RED, "Nuclear Strike Beacon", "Ion Cannon Beacon" );
			Log( s: pname( -1 ), s: " plants ", s:nukename );
			SetPlayerProperty( 0, 0, PROP_TOTALLYFROZEN );
			break;

		case INVITEM_RefillC4:
			/* Refill remote C4 */
			if( CheckInventory( "RemoteC4Count" ) > 0 )
				SetInventory( "RemoteC4", CheckInventory( "RemoteC4Count" ));

			/* Mines */
			if( CheckInventory( "ProxyMineCount" ) > 0 )
				SetInventory( "ProxyMine", CheckInventory( "ProxyMineCount" ));

			/* Timed C4 */
			if( CheckInventory( "TimedC4Count" ) > 0 )
				SetInventory( "TimedC4", CheckInventory( "TimedC4Count" ));

			break;

		case INVITEM_MarineBeacon:
			/* The marine beacon summons a marine - try spawn it 32 units above the
			 * beacon. If success, signal the beacon that it should go away. Otherwise
			 * it will try again after a second. This setup ensures that the player
			 * actually gets the marine he requested. */
			marine = cond( team == TEAM_BLUE, "BlueBackup", "RedBackup" );
			x = GetActorX( 0 );
			y = GetActorY( 0 );
			z = GetActorZ( 0 ) + 32.0;

			if( Spawn( marine, x, y, z ))
			{	Spawn( "TeleportFog", x, y, z );
				SetActorState( 0, "Done" );
				terminate;
			}

			break;

		case INVITEM_SelfHeal:
			/* Self-heal item was used - give the syringe and switch to it. This
			 * cannot be done in DECORATE because of the necessary one-tic delay. */
			if( CheckInventory( "SelfHeal" ))
				terminate;

			GiveInventory( "SelfHeal", 1 );
			delay( 1 );
			SetWeapon( "SelfHeal" );
			break;

		case INVITEM_SpawnMarker:
			int markertid = TID_SpawnMarker + PlayerNumber();

			if (CheckInventory ("PowerSpawnMarkerRecentUse") && HasSpawnMarker[PlayerNumber()])
			{
				RemoveSpawnMarker (PlayerNumber());
				IntelMessage ("Spawn spot cleared");
				terminate;
			}

			if (CheckInventory ("IsInSpawnRoom"))
			{
				IntelMessage ("\cAYou cannot set the spawn point in the spawn room!\nUse twice to clear the spawn spot.");
				LocalAmbientSound ("misc/nope", 127);
			}
			else
			{
				RemoveSpawnMarker (PlayerNumber());
				bool failed = false;

				if (!IsPlayerInBase())
					failed = true;
				else if (Spawn ("SpawnMarkerCheck", GetActorX (0), GetActorY (0), GetActorFloorZ (0)) == 0)
					failed = true;
				else
				{
					if (Spawn (cond (PlayerTeam() == TEAM_BLUE, "SpawnMarker_Blue", "SpawnMarker_Red"),
						GetActorX (0), GetActorY (0), GetActorCeilingZ (0) - 32.0, markertid, GetActorAngle (0)))
					{
						IntelMessage ("\cDSpawn point set successfully!\nUse twice to clear the spawn spot.");
						SetThingSpecial (markertid, ACS_ExecuteAlways, SC_SpawnMarkerDestroyed, 0, PlayerNumber());
						LocalAmbientSound ("menu/prompt", 127);
						HasSpawnMarker[PlayerNumber()] = true;
					}
					else
						failed = true;
				}

				if (failed)
				{
					IntelMessage ("\cACould not set spawn point there.\nYour spawn point has been cleared.");
					LocalAmbientSound ("misc/nope", 127);
				}
			}

			GiveInventory ("SpawnMarkerRecentUse", 1);
			break;
	}
}

// =============================================================================
//
script SC_SpawnMarkerDestroyed (int playernum)
{
	int killernum = PlayerNumber();
	SetActivator (killernum);
	IntelMessage (strparam (s:"You have destroyed the spawn marker of ", n:playernum + 1));
	SetActivator (playernum);
	IntelMessage (strparam (s:"Your spawn marker has been destroyed by ", n:killernum + 1));
	HasSpawnMarker[playernum] = false;
}

/* =============================================================================
 * HEALING RADIUS CODE
 *
 * This script is called by the healing radius regularly with action=0, in which
 * the radius looks around for nearby players. If any are found, the radius starts
 * another instance of this script, with action=1. In this instance, the radius heals
 * the player it found until the player eather is fully healed or is too far away
 * from the radius.
 * =========================================================================== */
#define HEALRAD_RANGE 128
#define HEALRAD_AMOUNT 10
#define HEALRAD_DELAY 5

#define HEALRAD_SEEK 0
#define HEALRAD_HEAL 1

int IsBeingHealed[MAXPLAYERS];

script SC_HealingRadius( int action, int i )
{	int shp, n;

	switch( action )
	{	case HEALRAD_SEEK:
			for( i = 0; i < MAXPLAYERS; i++ )
			{	if( GetActorHealth( TID_Player + i ) < GetActorSpawnHealth( TID_Player + i ) && !CheckActorInventory( TID_Player + i, "IsMech" ))
					if( CheckActorDistance( 0, TID_Player + i, HEALRAD_RANGE ) && !IsBeingHealed[i] )
						ACS_ExecuteAlways( SC_HealingRadius, 0, HEALRAD_HEAL, i );
			}

			break;

		case HEALRAD_HEAL:
			IsBeingHealed[i] = true;
			shp = GetActorSpawnHealth( TID_Player + i );

			do
			{	n = GetActorHealth( TID_Player + i ) + HEALRAD_AMOUNT;

				if( n > shp )
					n = shp;

				SetActorHealth( TID_Player + i, n );
				delay( HEALRAD_DELAY );
			}
			while( n < shp && n > 0 && CheckActorDistance( 0, TID_Player + i, HEALRAD_RANGE ));

			IsBeingHealed[i] = false;
			break;
	}
}